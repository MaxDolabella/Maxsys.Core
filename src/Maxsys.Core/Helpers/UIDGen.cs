using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Maxsys.Core.Helpers;
public static class UIDGen
{
    /// <summary>
    /// Default is <see cref="SequentialGuidOptions.SequentialAsVersion7"/>
    /// </summary>
    public static SequentialGuidOptions DEFAULT_SEQUENTIAL_GUID_OPTION = SequentialGuidOptions.SequentialAsVersion7;

    /// <summary>
    /// Randomly creates a hexadecimal string representation of a n bits UID.<br/>
    /// The result string is in lowecase.
    /// </summary>
    /// <returns>A string of hexadecimal 32 bits UID representation, for example: "7f2c4a00".</returns>
    public static string GenerateUID(UIDBits bits, UIDGenerationOptions options = UIDGenerationOptions.None)
        => GenerateUID((int)bits, options);

    /// <summary>
    /// Randomly creates a hexadecimal string representation of a n bytes UID (bits=n*8).<br/>
    /// The result string is in lowecase.
    /// </summary>
    /// <returns>A string of hexadecimal 32 bits (4 bytes) UID representation, for example: "7f2c4a00".</returns>
    public static string GenerateUID(int bytes, UIDGenerationOptions options = UIDGenerationOptions.None)
    {
        byte[] randomBytes = RandomNumberGenerator.GetBytes(bytes);

        var result = BitConverter.ToString(randomBytes);

        #region Options

        if (options.HasFlag(UIDGenerationOptions.LowerCase))
        {
            result = result.ToLower();
        }
        if (!options.HasFlag(UIDGenerationOptions.KeepDots))
        {
            result = result.Replace("-", string.Empty);
        }

        #endregion Options

        return result;
    }

    #region Guid

    /// <summary>
    /// Generates a new GUID using the specified sequential GUID option.
    /// When <paramref name="sequentialGuidOption"/> is not provided, <see cref="DEFAULT_SEQUENTIAL_GUID_OPTION"/> will be used.
    /// By default, <see cref="DEFAULT_SEQUENTIAL_GUID_OPTION"/> is set to <see cref="SequentialGuidOptions.SequentialAsVersion7"/>.
    /// </summary>
    /// <param name="sequentialGuidOption">
    /// The sequential GUID generation option to use. If null, the default option will be applied.
    /// </param>
    /// <param name="dateTimeOffset">
    /// The date and time to use for time-based GUID generation. If null, the current date and time will be used.
    /// Only applicable when using <see cref="SequentialGuidOptions.SequentialAsVersion7"/>.
    /// </param>
    /// <returns>
    /// A new <see cref="Guid"/> generated according to the specified options.
    /// </returns>
    public static Guid NewGuid(SequentialGuidOptions? sequentialGuidOption = null, DateTimeOffset? dateTimeOffset = null)
    {
        var switchOption = sequentialGuidOption ?? DEFAULT_SEQUENTIAL_GUID_OPTION;
        return switchOption switch
        {
            SequentialGuidOptions.SequentialAsVersion7 => dateTimeOffset is null ? Guid.CreateVersion7() : Guid.CreateVersion7(dateTimeOffset.Value),
            SequentialGuidOptions.SequentialAsString or
                SequentialGuidOptions.SequentialAsBinary or
                SequentialGuidOptions.SequentialAtEnd => JeremyHToddSequentialGuid(switchOption),
            _ => Guid.NewGuid(),
        };
    }

    public static Guid NewGuid(string guid) => Guid.Parse(guid);

    /// <summary>
    /// Returns a new GUID value which is sequentially ordered when formatted as
    /// a string, a byte array, or ordered by the least significant six bytes of the
    /// Data4 block, as specified by <paramref name="sequentialGuidOption" />.
    /// </summary>
    /// <param name="sequentialGuidOption">
    /// Specifies the type of sequential GUID (i.e. whether sequential as a string,
    /// as a byte array, or according to the Data4 block.  This can affect
    /// performance under various database types; see below.
    /// </param>
    /// <returns>
    /// A <see cref="Guid" /> structure whose value is created by replacing
    /// certain randomly-generated bytes with a sequential timestamp.
    /// </returns>
    /// <remarks>
    /// <para>
    /// This method creates a new GUID value which combines a random component
    /// with the current timestamp, also known as a COMB.  The general concept
    /// is outlined in Jimmy Nilsson's article "The Cost of GUIDs as Primary Keys",
    /// and involves replacing either the least significant or most significant
    /// six bytes of the GUID with the current timestamp.  This reduces the
    /// random component of the GUID from 16 bytes to 10 bytes, but this is
    /// still sufficient to prevent a collision under most real-world circumstances.
    /// </para>
    /// <para>
    /// The purpose of sequential GUIDs is not to promote the use of GUIDs as
    /// sortable entities.  In fact, GUIDs generated very close together may
    /// have the same timestamp and are not guaranteed to be sequentially ordered
    /// at all.  The intent is to increase performance when doing repeated
    /// inserts into database tables that have a clustered index on a GUID
    /// column, so that later entries do not have to be inserted into the middle
    /// of the table, but can simply be appended to the end.
    /// </para>
    /// <para>
    /// According to experiments, Microsoft SQL Server sorts GUID values using
    /// the least significant six bytes of the Data4 block; therefore, GUIDs being
    /// generated for use with SQL Server should pass a <paramref name="sequentialGuidOption" />
    /// value of <c>SequentialAtEnd</c>.  GUIDs generated for most other database
    /// types should be passed a <paramref name="sequentialGuidOption" /> value of
    /// <c>SequentialAsString</c> or <c>SequentialAsByteArray</c>.
    /// </para>
    /// <para>
    /// Various standards already define a time-based UUID; however, the
    /// format specified by these standards splits the timestamp into
    /// several components, limiting its usefulness as a sequential ID.
    /// Additionally, the format used for such UUIDs is not compatible
    /// with the GUID ordering on Microsoft SQL Server.
    /// </para>
    /// </remarks>
    private static Guid JeremyHToddSequentialGuid(SequentialGuidOptions sequentialGuidOption)
    {
        // We start with 16 bytes of cryptographically strong random data.
        byte[] randomBytes = RandomNumberGenerator.GetBytes(10);

        // An alternate method: use a normally-created GUID to get our initial
        // random data:
        // byte[] randomBytes = Guid.NewGuid().ToByteArray();
        // This is faster than using RNGCryptoServiceProvider, but I don't
        // recommend it because the .NET Framework makes no guarantee of the
        // randomness of GUID data, and future versions (or different
        // implementations like Mono) might use a different method.

        // Now we have the random basis for our GUID.  Next, we need to
        // create the six-byte block which will be our timestamp.

        // We start with the number of milliseconds that have elapsed since
        // DateTime.MinValue.  This will form the timestamp.  There's no use
        // being more specific than milliseconds, since DateTime.Now has
        // limited resolution.

        // Using millisecond resolution for our 48-bit timestamp gives us
        // about 5900 years before the timestamp overflows and cycles.
        // Hopefully this should be sufficient for most purposes. :)
        long timestamp = DateTime.UtcNow.Ticks / 10000L;

        // Then get the bytes
        byte[] timestampBytes = BitConverter.GetBytes(timestamp);

        // Since we're converting from an Int64, we have to reverse on
        // little-endian systems.
        if (BitConverter.IsLittleEndian)
        {
            Array.Reverse(timestampBytes);
        }

        byte[] guidBytes = new byte[16];

        switch (sequentialGuidOption)
        {
            case SequentialGuidOptions.SequentialAsString:
            case SequentialGuidOptions.SequentialAsBinary:

                // For string and byte-array version, we copy the timestamp first, followed
                // by the random data.
                Buffer.BlockCopy(timestampBytes, 2, guidBytes, 0, 6);
                Buffer.BlockCopy(randomBytes, 0, guidBytes, 6, 10);

                // If formatting as a string, we have to compensate for the fact
                // that .NET regards the Data1 and Data2 block as an Int32 and an Int16,
                // respectively.  That means that it switches the order on little-endian
                // systems.  So again, we have to reverse.
                if (sequentialGuidOption is SequentialGuidOptions.SequentialAsString && BitConverter.IsLittleEndian)
                {
                    Array.Reverse(guidBytes, 0, 4);
                    Array.Reverse(guidBytes, 4, 2);
                }

                break;

            case SequentialGuidOptions.SequentialAtEnd:

                // For sequential-at-the-end versions, we copy the random data first,
                // followed by the timestamp.
                Buffer.BlockCopy(randomBytes, 0, guidBytes, 0, 10);
                Buffer.BlockCopy(timestampBytes, 2, guidBytes, 10, 6);
                break;
        }

        return new Guid(guidBytes);
    }

    #endregion Guid

    /// <summary>
    /// Creates a hexadecimal string representation of a 64 bits UID based on a <see cref="DateTime"/> value.<br/>
    /// If <paramref name="dateTime"/> arg is not passed (<see langword="default"/>),
    /// <paramref name="dateTime"/> will be assigned as <see cref="DateTime.Now"/>.<br/>
    /// The result string is in lowecase.
    /// </summary>
    /// <param name="dateTime">Is the <see cref="DateTime"/> to be converted into a 64 bits UID.</param>
    /// <returns>A string of hexadecimal 64 bits UID representation; for example, "7c30b180d0f07b43".</returns>
    public static string GenerateUID(DateTime dateTime = default)
    {
        if (dateTime == default) dateTime = DateTime.Now;

        byte randomByte = RandomNumberGenerator.GetBytes(1)[0];

        return $"{dateTime.Year:x3}{dateTime.Month:x2}{dateTime.Day:x2}{dateTime.Hour:x2}{dateTime.Second:x2}{dateTime.Millisecond:x3}{randomByte:x2}";
    }
}

[Flags]
public enum UIDGenerationOptions : byte
{
    None = 0,
    LowerCase = 1,
    KeepDots = 2
}

public enum UIDBits
{
    B8 = 1,
    B16 = 2,
    B24 = 3,
    B32 = 4,
    B64 = 8,
    B128 = 16,
    B192 = 24,
    B256 = 32,
    B512 = 64,
    B1024 = 128
}

/// <summary>
/// Source:
/// <see href="https://github.com/jhtodd/SequentialGuid/blob/master/SequentialGuid/Enums/SequentialGuidType.cs">Github</see>
/// <para/>
/// Describes the type of a sequential GUID value.
/// <list type="bullet">
/// <item><see cref="None"/></item>
/// <item><see cref="SequentialAsVersion7"/></item>
/// <item><see cref="SequentialAsString"/></item>
/// <item><see cref="SequentialAsBinary"/></item>
/// <item><see cref="SequentialAtEnd"/></item>
/// </list>
/// </summary>
public enum SequentialGuidOptions
{
    /// <summary>
    /// Uses default v4
    /// </summary>
    None = 0,

    /// <summary>
    /// Uses default v7
    /// </summary>
    SequentialAsVersion7,

    /// <summary>
    /// The GUID should be sequential when formatted using the
    /// <see cref="Guid.ToString()" /> method.
    /// </summary>
    SequentialAsString,

    /// <summary>
    /// The GUID should be sequential when formatted using the
    /// <see cref="Guid.ToByteArray(bool)" /> method.
    /// </summary>
    SequentialAsBinary,

    /// <summary>
    /// The sequential portion of the GUID should be located at the end
    /// of the Data4 block.
    /// </summary>
    SequentialAtEnd
}